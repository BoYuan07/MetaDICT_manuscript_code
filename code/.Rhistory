d <- nrow(count) # Number of taxa
O_list <- list() # Observed abundance list
X_list <- list() # absolute abundance
w_list <- matrix(0,m,d) # measurement efficiency
meta.list <- list() # Meta table with covariate Y
meta.list1 = list() # Meta table without covariate Y
# Select 40 random taxa to be increased in abundance for Y = 1 group
d1 <- sample(1:d,40)
#------------------------------------------------------------------------------
# 2. Construct Taxa Adjacency and Laplacian Matrix
#------------------------------------------------------------------------------
A <- matrix(0,d,d)
for(i in 1:d){
idx <- order(dist[i,],decreasing = F)[2:(neighbor+1)]
A[i,idx] <- A[idx,i] <- exp(-dist[i,idx]/sigma)
}
# Compute Laplacian matrix L = D1 - A, where D1 is the degree matrix
D1 <- diag(rowSums(A))
L <- D1-A
# Extract last k eigenvectors of L for constructing measurement efficiency
svd_res <- svd(L)
U <- svd_res$u[ , (ncol(svd_res$u) - k + 1):ncol(svd_res$u)]
#------------------------------------------------------------------------------
# 3. Generate Datasets
#------------------------------------------------------------------------------
for(i in 1:m){
# Sample basis for simulated dataset i
idx1 <- sample(ncol(count),n)
X0 <- as.matrix(count[,idx1])
# Simulate absolute abundance
X <- sapply(1:n,function(j)rdirichlet(X0[,j]+0.1))
# Y: conditions
Y <- sample(1:2,size=n,replace=TRUE,prob=c(1/2,1/2))
# Add differences between two groups
X[d1,which(Y==1)] <- (X[d1,which(Y==1)])*ez
# Simulate sample-specific bias
X_lib <- X%*%diag(sample(10000:15000,n,replace = T))
#------------------------------------------------------------------------------
# 4. Generate Measurement Efficiency 'w'
#------------------------------------------------------------------------------
weight <- 1 - 2 * runif(k)        # Random weights in [-1, 1]
w_raw  <- U %*% as.matrix(weight) # Project onto eigenvector space
w_vec  <- w_raw[ , 1]             # Extract as a single vector
# Normalize 'w' to range [0.05, 1]
w_vec <- (w_vec - min(w_vec) + 0.05)
w_vec <- w_vec / max(w_vec)
# Y2: uninformative label
Y2 <- rbinom(n,1,1/2)
#------------------------------------------------------------------------------
# 5. Apply Measurement Efficiency and Store Data
#------------------------------------------------------------------------------
O_list[[i]]  <- floor(diag(w_vec) %*% X_lib)  # Apply measurement efficiency
w_list[i, ]  <- w_vec                         # Store efficiency vector
X_list[[i]]  <- X                             # Store true abundance
# Metadata storage
meta.list[[i]]  <- data.frame(Y = paste("Group", Y), Y2 = paste("Group", Y2))
meta.list1[[i]] <- data.frame(Y2 = paste("Group", Y2))
}
return(list(O_list, w_list, X_list, meta.list, meta.list1))
}
# Set seed for reproducibility
set.seed(3)
# Define dataset parameters
m <- 2      # Number of datasets
n <- 200    # Number of samples per dataset
# Generate simulated dataset
data <- init_dataset_discrete(m, n, count, dist, k = 10, ez = 5)
# Extract components from the generated data
O_list      <- data[[1]]  # Observed abundance (with measurement bias)
w_list_t    <- data[[2]]  # Measurement efficiency values
X_list      <- data[[3]]  # True abundance (without measurement bias)
meta.list   <- data[[4]]  # Full metadata (includes Y and Y2)
meta.list.sub <- data[[5]] # Metadata subset (without Y)
# Combine metadata and observed abundance into single structures
meta <- do.call(rbind, meta.list)  # Merge metadata from all datasets
O    <- do.call(cbind, O_list)     # Merge observed abundance matrices
# Assign batch labels to metadata
meta$batch <- factor(rep(paste0("Batch ", seq_len(m)), each = n))
# Convert categorical variables to factors
meta$Y  <- factor(meta$Y)
meta$Y2 <- factor(meta$Y2)
# Create a version of meta without the primary group label (Y)
meta_sub <- meta[ , -1]
# Define dataset and sample grouping information
dataset_info <- meta$batch
sample_info  <- meta$Y
#write.csv(O,"../data/Simulation_data/other_sim/Fig2cd_count.csv")
#write.csv(meta,"../data/Simulation_data/other_sim/Fig2cd_meta.csv")
library(ecodist)
library(ggplot2)
library(vegan)
library(ConQuR)
library(doParallel)
library(MMUPHin)
library(bayesm)
library(ggpubr)
library(PLSDAbatch)
source("./function.R")
# load order level data
count = read.csv("../data/count_order.csv")
count = count[,-1]
dist = read.csv("../data/dist_order.csv")
dist = as.matrix(dist[,-1])
init_dataset_discrete <- function(m,n,count,dist,k,neighbor = 5, sigma = 1, ez = 10){
#------------------------------------------------------------------------------
# 1. Initialize Variables
#------------------------------------------------------------------------------
d <- nrow(count) # Number of taxa
O_list <- list() # Observed abundance list
X_list <- list() # absolute abundance
w_list <- matrix(0,m,d) # measurement efficiency
meta.list <- list() # Meta table with covariate Y
meta.list1 = list() # Meta table without covariate Y
# Select 40 random taxa to be increased in abundance for Y = 1 group
d1 <- sample(1:d,40)
#------------------------------------------------------------------------------
# 2. Construct Taxa Adjacency and Laplacian Matrix
#------------------------------------------------------------------------------
A <- matrix(0,d,d)
for(i in 1:d){
idx <- order(dist[i,],decreasing = F)[2:(neighbor+1)]
A[i,idx] <- A[idx,i] <- exp(-dist[i,idx]/sigma)
}
# Compute Laplacian matrix L = D1 - A, where D1 is the degree matrix
D1 <- diag(rowSums(A))
L <- D1-A
# Extract last k eigenvectors of L for constructing measurement efficiency
svd_res <- svd(L)
U <- svd_res$u[ , (ncol(svd_res$u) - k + 1):ncol(svd_res$u)]
#------------------------------------------------------------------------------
# 3. Generate Datasets
#------------------------------------------------------------------------------
for(i in 1:m){
# Sample basis for simulated dataset i
idx1 <- sample(ncol(count),n)
X0 <- as.matrix(count[,idx1])
# Simulate absolute abundance
X <- sapply(1:n,function(j)rdirichlet(X0[,j]+0.1))
# Y: conditions
Y <- sample(1:2,size=n,replace=TRUE,prob=c(1/2,1/2))
# Add differences between two groups
X[d1,which(Y==1)] <- (X[d1,which(Y==1)])*ez
# Simulate sample-specific bias
X_lib <- X%*%diag(sample(10000:15000,n,replace = T))
#------------------------------------------------------------------------------
# 4. Generate Measurement Efficiency 'w'
#------------------------------------------------------------------------------
weight <- 1 - 2 * runif(k)        # Random weights in [-1, 1]
w_raw  <- U %*% as.matrix(weight) # Project onto eigenvector space
w_vec  <- w_raw[ , 1]             # Extract as a single vector
# Normalize 'w' to range [0.05, 1]
w_vec <- (w_vec - min(w_vec) + 0.05)
w_vec <- w_vec / max(w_vec)
# Y2: uninformative label
Y2 <- rbinom(n,1,1/2)
#------------------------------------------------------------------------------
# 5. Apply Measurement Efficiency and Store Data
#------------------------------------------------------------------------------
O_list[[i]]  <- floor(diag(w_vec) %*% X_lib)  # Apply measurement efficiency
w_list[i, ]  <- w_vec                         # Store efficiency vector
X_list[[i]]  <- X                             # Store true abundance
# Metadata storage
meta.list[[i]]  <- data.frame(Y = paste("Group", Y))
meta.list1[[i]] <- data.frame(Y2 = paste("Group", Y2))
}
return(list(O_list, w_list, X_list, meta.list, meta.list1))
}
# Set seed for reproducibility
set.seed(3)
# Define dataset parameters
m <- 2      # Number of datasets
n <- 200    # Number of samples per dataset
# Generate simulated dataset
data <- init_dataset_discrete(m, n, count, dist, k = 10, ez = 5)
# Extract components from the generated data
O_list      <- data[[1]]  # Observed abundance (with measurement bias)
w_list_t    <- data[[2]]  # Measurement efficiency values
X_list      <- data[[3]]  # True abundance (without measurement bias)
meta.list   <- data[[4]]  # Full metadata (includes Y and Y2)
meta.list.sub <- data[[5]] # Metadata subset (without Y)
# Combine metadata and observed abundance into single structures
meta <- do.call(rbind, meta.list)  # Merge metadata from all datasets
meta1 <- do.call(rbind, meta.list.sub)
O    <- do.call(cbind, O_list)     # Merge observed abundance matrices
# Assign batch labels to metadata
meta$batch <- factor(rep(paste0("Batch ", seq_len(m)), each = n))
# Convert categorical variables to factors
meta$Y  <- factor(meta$Y)
meta$Y2 <- factor(meta1$Y2)
# Create a version of meta without the primary group label (Y)
meta_sub <- meta[ , -1]
# Define dataset and sample grouping information
dataset_info <- meta$batch
sample_info  <- meta$Y
#write.csv(O,"../data/Simulation_data/other_sim/Fig2cd_count.csv")
#write.csv(meta,"../data/Simulation_data/other_sim/Fig2cd_meta.csv")
#------------------------------------------------------------------------------
# (1) Setup & labeling
#------------------------------------------------------------------------------
rownames(O) <- paste0("Taxon", seq_len(nrow(O)))
colnames(O) <- paste0("Sample", seq_len(ncol(O)))
#------------------------------------------------------------------------------
# (2) PCoA for unprocessed data
#------------------------------------------------------------------------------
p1.1 <- pcoa.plot.discrete(
O,
dataset_info,
"Unprocessed",
colorset  = "Set1",
pointsize = 0.4
)
p1.2 <- pcoa.plot.discrete(
O,
sample_info,
"Unprocessed",
colorset  = "Dark2",
pointsize = 0.4
)
#------------------------------------------------------------------------------
# (3) PCoA for truth
#------------------------------------------------------------------------------
X <- do.call(cbind, X_list)
p2.1 <- pcoa.plot.discrete(
X,
dataset_info,
"Truth",
colorset  = "Set1",
pointsize = 0.4
)
p2.2 <- pcoa.plot.discrete(
X,
sample_info,
"Truth",
colorset  = "Dark2",
pointsize = 0.4
)
#------------------------------------------------------------------------------
# (4) MetaDICT analysis
#------------------------------------------------------------------------------
alpha <- 0.01
beta  <- 0.1
gamma <- 1
metadict_res_1 <- metadict(O_list, alpha, beta, gamma, dist, meta.list = meta.list.sub)  # without Y
metadict_res_2 <- metadict(O_list, alpha, beta, gamma, dist, meta.list = meta.list)      # with Y
p3.1 <- pcoa.plot.discrete(
metadict_res_1$X,
dataset_info,
"MetaDICT",
colorset  = "Set1",
pointsize = 0.4
)
p3.2 <- pcoa.plot.discrete(
metadict_res_1$X,
sample_info,
"MetaDICT",
colorset  = "Dark2",
pointsize = 0.4
)
p3.3 <- pcoa.plot.discrete(
metadict_res_2$X,
dataset_info,
"MetaDICT",
colorset  = "Set1",
pointsize = 0.4
)
p3.4 <- pcoa.plot.discrete(
metadict_res_2$X,
sample_info,
"MetaDICT",
colorset  = "Dark2",
pointsize = 0.4
)
#------------------------------------------------------------------------------
# (5) Percentile normalization
#------------------------------------------------------------------------------
O_ref <- t(O) / colSums(O)
O_ref[O_ref == 0] <- runif(sum(O_ref == 0), 0, 1e-6)
colnames(O_ref) <- paste0("Taxon",  seq_len(ncol(O_ref)))
rownames(O_ref) <- paste0("Sample", seq_len(nrow(O_ref)))
res_percentile_1 <- percentile_norm(O_ref, dataset_info, meta1$Y2, "Group 1")
res_percentile_2 <- percentile_norm(O_ref, dataset_info, meta$Y,  "Group 1")
p7.1 <- pcoa.plot.discrete(
t(res_percentile_1),
dataset_info,
"Percentile-Norm",
colorset  = "Set1",
pointsize = 0.4
)
p7.2 <- pcoa.plot.discrete(
t(res_percentile_1),
sample_info,
"Percentile-Norm",
colorset  = "Dark2",
pointsize = 0.4
)
p7.3 <- pcoa.plot.discrete(
t(res_percentile_2),
dataset_info,
"Percentile-Norm",
colorset  = "Set1",
pointsize = 0.4
)
p7.4 <- pcoa.plot.discrete(
t(res_percentile_2),
sample_info,
"Percentile-Norm",
colorset  = "Dark2",
pointsize = 0.4
)
#------------------------------------------------------------------------------
# (6) PLSDA-batch
#------------------------------------------------------------------------------
O.clr       <- microbiome::transform(O, "clr")
res_plsda_1 <- PLSDA_batch(t(O.clr), Y.trt = meta1$Y2, Y.bat = dataset_info)$X.nobatch
res_plsda_2 <- PLSDA_batch(t(O.clr), Y.trt = meta$Y,  Y.bat = dataset_info)$X.nobatch
p8.1 <- pcoa.plot.discrete(
t(res_plsda_1),
dataset_info,
"PLSDA-batch",
distance = "euclidean",
colorset  = "Set1",
pointsize = 0.4
)
p8.2 <- pcoa.plot.discrete(
t(res_plsda_1),
sample_info,
"PLSDA-batch",
distance = "euclidean",
colorset  = "Dark2",
pointsize = 0.4
)
p8.3 <- pcoa.plot.discrete(
t(res_plsda_2),
dataset_info,
"PLSDA-batch",
distance = "euclidean",
colorset  = "Set1",
pointsize = 0.4
)
p8.4 <- pcoa.plot.discrete(
t(res_plsda_2),
sample_info,
"PLSDA-batch",
distance = "euclidean",
colorset  = "Dark2",
pointsize = 0.4
)
p3.1
p3.2
# Set seed for reproducibility
set.seed(3)
# Define dataset parameters
m <- 2      # Number of datasets
n <- 200    # Number of samples per dataset
# Generate simulated dataset
data <- init_dataset_discrete(m, n, count, dist, k = 10, ez = 5)
# Extract components from the generated data
O_list      <- data[[1]]  # Observed abundance (with measurement bias)
w_list_t    <- data[[2]]  # Measurement efficiency values
X_list      <- data[[3]]  # True abundance (without measurement bias)
meta.list   <- data[[4]]  # Full metadata (includes Y and Y2)
meta.list.sub <- data[[5]] # Metadata subset (without Y)
# Combine metadata and observed abundance into single structures
meta <- do.call(rbind, meta.list)  # Merge metadata from all datasets
meta1 <- do.call(rbind, meta.list.sub)
O    <- do.call(cbind, O_list)     # Merge observed abundance matrices
# Assign batch labels to metadata
meta$batch <- factor(rep(paste0("Batch ", seq_len(m)), each = n))
# Convert categorical variables to factors
meta$Y  <- factor(meta$Y)
meta1$Y2 <- factor(meta1$Y2)
# Create a version of meta without the primary group label (Y)
meta_sub <- meta[ , -1]
# Define dataset and sample grouping information
dataset_info <- meta$batch
sample_info  <- meta$Y
#write.csv(O,"../data/Simulation_data/other_sim/Fig2cd_count.csv")
#write.csv(meta,"../data/Simulation_data/other_sim/Fig2cd_meta.csv")
#------------------------------------------------------------------------------
# (9) ComBat-Seq
#------------------------------------------------------------------------------
res_ComBatSeq_1 <- sva::ComBat_seq(
as.matrix(O),
batch      = dataset_info,
covar_mod  = as.data.frame(meta1)  # without Y
)
res_ComBatSeq_2 <- sva::ComBat_seq(
as.matrix(O),
batch      = dataset_info,
covar_mod  = meta[,-2]                    # with Y
)
#------------------------------------------------------------------------------
# (9) ComBat-Seq
#------------------------------------------------------------------------------
res_ComBatSeq_1 <- sva::ComBat_seq(
as.matrix(O),
batch      = dataset_info,
covar_mod  = as.data.frame(meta1)  # without Y
)
res_ComBatSeq_2 <- sva::ComBat_seq(
as.matrix(O),
batch      = dataset_info,
covar_mod  = as.data.frame(meta[,-2])                    # with Y
)
#------------------------------------------------------------------------------
# (9) ComBat-Seq
#------------------------------------------------------------------------------
res_ComBatSeq_1 <- sva::ComBat_seq(
as.matrix(O),
batch      = dataset_info,
group = meta1$Y2  # without Y
)
res_ComBatSeq_2 <- sva::ComBat_seq(
as.matrix(O),
batch      = dataset_info,
group = meta$Y                 # with Y
)
p5.1 <- pcoa.plot.discrete(
res_ComBatSeq_1,
dataset_info,
"ComBatSeq",
colorset  = "Set1",
pointsize = 0.4
)
p5.2 <- pcoa.plot.discrete(
res_ComBatSeq_1,
sample_info,
"ComBatSeq",
colorset  = "Dark2",
pointsize = 0.4
)
p5.3 <- pcoa.plot.discrete(
res_ComBatSeq_2,
dataset_info,
"ComBatSeq",
colorset  = "Set1",
pointsize = 0.4
)
p5.4 <- pcoa.plot.discrete(
res_ComBatSeq_2,
sample_info,
"ComBatSeq",
colorset  = "Dark2",
pointsize = 0.4
)
p5.1
p5.2
p5.3
p5.4
#------------------------------------------------------------------------------
# (10) MMUPHin
#------------------------------------------------------------------------------
colnames(O)    <- paste0("Sample", seq_len(ncol(O)))
rownames(meta) <- paste0("Sample", seq_len(ncol(O)))
meta$batch     <- as.factor(meta$batch)
res_mmuphin_1 <- adjust_batch(
feature_abd = O,
batch       = "batch",
covariates  = "Y2",
data        = meta
)$feature_abd_adj
#------------------------------------------------------------------------------
# (10) MMUPHin
#------------------------------------------------------------------------------
colnames(O)    <- paste0("Sample", seq_len(ncol(O)))
rownames(meta) <- paste0("Sample", seq_len(ncol(O)))
meta$batch     <- as.factor(meta$batch)
meta$Y2 <- meta1$Y2
res_mmuphin_1 <- adjust_batch(
feature_abd = O,
batch       = "batch",
covariates  = "Y2",
data        = meta
)$feature_abd_adj
res_mmuphin_2 <- adjust_batch(
feature_abd = O,
batch       = "batch",
covariates  = "Y",
data        = meta
)$feature_abd_adj
p6.1 <- pcoa.plot.discrete(
res_mmuphin_1,
dataset_info,
"MMUPHin",
colorset  = "Set1",
pointsize = 0.4
)
p6.2 <- pcoa.plot.discrete(
res_mmuphin_1,
sample_info,
"MMUPHin",
colorset  = "Dark2",
pointsize = 0.4
)
p6.3 <- pcoa.plot.discrete(
res_mmuphin_2,
dataset_info,
"MMUPHin",
colorset  = "Set1",
pointsize = 0.4
)
p6.4 <- pcoa.plot.discrete(
res_mmuphin_2,
sample_info,
"MMUPHin",
colorset  = "Dark2",
pointsize = 0.4
)
p6.1
p6.2
p6.3
p6.4
